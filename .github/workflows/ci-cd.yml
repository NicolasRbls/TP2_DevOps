name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: onyx-silo-459007-n1
  GKE_CLUSTER: advertising-cluster
  GKE_ZONE: europe-west1-b
  REGISTRY: europe-west1-docker.pkg.dev
  REPOSITORY: advertising-repo

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ env.PROJECT_ID }}

    # Configure Docker for Artifact Registry
    - name: Configure Docker
      run: |-
        gcloud --quiet auth configure-docker ${{ env.REGISTRY }}

    # Build frontend
    - name: Build Frontend
      run: |-
        cd frontend
        # Créer le fichier .env.production
        echo "REACT_APP_API_URL=/api" > .env.production
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}

    # Build backend
    - name: Build Backend
      run: |-
        cd backend
        docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }} .
        docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}

    # Get GKE credentials
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GCP_SA_KEY }}

    # Deploy to GKE
    - name: Deploy
      run: |-
        # Créer les configurations Kubernetes
        kubectl apply -f - << EOF
        apiVersion: cloud.google.com/v1
        kind: BackendConfig
        metadata:
          name: backend-config
        spec:
          healthCheck:
            checkIntervalSec: 15
            timeoutSec: 15
            healthyThreshold: 1
            unhealthyThreshold: 2
            type: HTTP
            requestPath: /
            port: 3001
        EOF
        
        # Mettre à jour les déploiements avec les nouvelles images
        kubectl set image deployment/backend backend=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}
        kubectl set image deployment/frontend frontend=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
        
        # Recréer l'Ingress
        kubectl apply -f - << EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: advertising-ingress
          annotations:
            kubernetes.io/ingress.class: "gce"
            cloud.google.com/backend-config: '{"default": "backend-config"}'
        spec:
          rules:
          - http:
              paths:
              - path: /api
                pathType: Prefix
                backend:
                  service:
                    name: backend
                    port:
                      number: 80
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: frontend
                    port:
                      number: 80
        EOF
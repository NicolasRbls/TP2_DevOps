name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: onyx-silo-459007-n1
  GKE_CLUSTER: advertising-cluster
  GKE_ZONE: europe-west1-b
  REGISTRY: europe-west1-docker.pkg.dev
  REPOSITORY: advertising-repo

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
      # 1) Récupération du code
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Authentification GCP via la clé JSON stockée dans le secret GCP_SA_KEY
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3) Installation et configuration de gcloud
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true

      # 4) Configure Docker pour pouvoir pousser dans Artifact Registry
      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.REGISTRY }} --quiet

      # 5) Build & push de l'image Frontend
      - name: Build and Push Frontend
        run: |
          cd frontend
          echo "REACT_APP_API_URL=/api" > .env.production
          docker build \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }} \
            .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}

      # 6) Build & push de l'image Backend
      - name: Build and Push Backend
        run: |
          cd backend
          docker build \
            -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }} \
            .
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}

      # 7) Récupération des credentials du cluster GKE
      - name: Get GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # 8) Déploiement sur GKE
      - name: Deploy to GKE
        run: |
          # BackendConfig pour le health check
          cat <<EOF | kubectl apply -f -
          apiVersion: cloud.google.com/v1
          kind: BackendConfig
          metadata:
            name: backend-config
          spec:
            healthCheck:
              checkIntervalSec: 15
              timeoutSec: 15
              healthyThreshold: 1
              unhealthyThreshold: 2
              type: HTTP
              requestPath: /
              port: 3001
          EOF

          # Mise à jour des images dans les deployments
          kubectl set image deployment/backend \
            backend=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}
          kubectl set image deployment/frontend \
            frontend=${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}

          # Ingress avec annotation de BackendConfig
          cat <<EOF | kubectl apply -f -
          apiVersion: networking.k8s.io/v1
          kind: Ingress
          metadata:
            name: advertising-ingress
            annotations:
              kubernetes.io/ingress.class: gce
              cloud.google.com/backend-config: '{"default":"backend-config"}'
          spec:
            rules:
              - http:
                  paths:
                    - path: /api
                      pathType: Prefix
                      backend:
                        service:
                          name: backend
                          port:
                            number: 80
                    - path: /
                      pathType: Prefix
                      backend:
                        service:
                          name: frontend
                          port:
                            number: 80
          EOF
